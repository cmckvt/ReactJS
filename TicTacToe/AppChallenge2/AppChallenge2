// Rewrite Board to use two loops to make the squares
// instead of hardcoding them.
import { useState } from "react";

function Square({ sqID, value, onSquareClick }) {
  return (
    <button key={sqID} className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

function BoardRow({ rowIDs, row, values }) {
  return (
    <div key={rowIDs[row]} className="board-row">
      {values[3 * row]}
      {values[3 * row + 1]}
      {values[3 * row + 2]}
    </div>
  );
}

function Board({ xIsNext, squares, onPlay }) {
  function handleClick(i) {
    if (squares[i] || calculateWinner(squares)) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = "X";
    } else {
      nextSquares[i] = "O";
    }
    onPlay(nextSquares);
  }

  const winner = calculateWinner(squares);
  let status;
  if (winner) {
    status = "Winner: " + winner + "!";
  } else {
    status = "Next player: " + (xIsNext ? "X" : "O");
  }

  const rowIDList = [9, 10, 11];
  const rowList = [0, 1, 2];
  const squareList = [0, 1, 2, 3, 4, 5, 6, 7, 8];

  const squareMap = squareList.map((x) => (
    <Square sqID={x} value={squares[x]} onSquareClick={() => handleClick(x)} />
  ));
  const rowMap = rowList.map((x) => (
    <BoardRow rowIDs={rowIDList} row={x} values={squareMap} />
  ));
  return (
    <>
      <div className="status">{status}</div>
      {rowMap}
    </>
  );
}

export default function Game() {
  const [history, setHistory] = useState([Array(9).fill(null)]);
  const [currentMove, setCurrentMove] = useState(0);
  const xIsNext = currentMove % 2 === 0;
  const currentSquares = history[currentMove];

  function handlePlay(nextSquares) {
    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];
    setHistory(nextHistory);
    setCurrentMove(nextHistory.length - 1);
  }

  function jumpTo(nextMove) {
    setCurrentMove(nextMove);
  }

  const moves = history.map((squares, move) => {
    let description;
    let buttonWrap = "You are at move #" + move;
    if (move == currentMove) {
      return (
        <li key={"history" + move}>
          <div>{buttonWrap}</div>
        </li>
      );
    }
    if (move > 0) {
      description = "Go to move #" + move;
    } else {
      description = "Go to game start";
    }

    return (
      <li key={"history" + move}>
        <button onClick={() => jumpTo(move)}>{description}</button>
      </li>
    );
  });

  return (
    <div className="game">
      <div className="game-board">
        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />
      </div>
      <div className="game-info">
        <ol>{moves}</ol>
      </div>
    </div>
  );
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}
